#!/usr/bin/env node

const debug = require('debug')('ara-contracts:cli:resale')
const { info, warn, error, log } = require('ara-console')
const { createProgram } = require('../lib/program')
const inquirer = require('inquirer')

const {
  getResaleAvailability,
  unlockResaleQuantity,
  lockResaleQuantity,
  setMinResalePrice,
  getMinResalePrice,
  setResaleQuantity,
  getResaleQuantity,
  setResaleConfig,
  getResaleConfig,
  setResalePrice,
  getResalePrice,
  unlockResale,
  lockResale
} = require('../commerce')

// yargs program command line interface instance
const program = createProgram({
  usage: `
usage: act resale: [-h] [--help] [options] [--] <command>
`
})

const { argv } = program
  // act resale set-price de959a3a14a5e299d4ad360e96a92f8287088335a6aea78002f7cb0c89bd5570 1 20
  .command('set-price [--seller] <did> <config> <price>', 'Sets the minimum resale price of an AFS. If the seller option is passed in, the seller\'s resale price will be set.', () => {
    program
      .positional('did', {
        type: 'string',
        describe: 'The AFS DID'
      })
      .positional('config', {
        type: 'number',
        describe: 'The resale config ID'
      })
      .positional('price', {
        type: 'string',
        describe: 'The resale price to set for the AFS'
      })
      .option('seller', {
        alias: 's',
        type: 'string',
        describe: 'DID of the AFS seller (if the seller is not also the AFS owner)'
      })
  }, onprice)
  // act resale set-quantity de959a3a14a5e299d4ad360e96a92f8287088335a6aea78002f7cb0c89bd5570 1 2
  .command('set-quantity <did> <config> <amount>', 'Set the number of times an AFS can be resold', () => {
    program
      .positional('did', {
        type: 'string',
        describe: 'The AFS DID'
      })
      .positional('config', {
        type: 'number',
        describe: 'The resale config ID'
      })
      .positional('amount', {
        type: 'number',
        describe: 'The number of times the AFS can be resold'
      })
  }, onquantity)
  .command('get-price [--seller] <did> <config>', 'Get the minimum resale price of an AFS. If the seller option is passed in, the seller\'s resale price will be returned.', () => {
    program
      .positional('did', {
        type: 'string',
        describe: 'The AFS DID'
      })
      .positional('config', {
        type: 'number',
        describe: 'The resale config ID'
      })
      .option('seller', {
        alias: 's',
        type: 'string',
        describe: 'DID of the AFS seller (if the seller is not also the AFS owner)'
      })
  }, ongetprice)
  .command('get-quantity [--seller] <did> <config>', 'Get the number of time an AFS can be resold. If the seller option is passed in, the seller\'s available supply will be returned.', () => {
    program
      .positional('did', {
        type: 'string',
        describe: 'The AFS DID'
      })
      .positional('config', {
        type: 'number',
        describe: 'The resale config ID'
      })
      .option('seller', {
        alias: 's',
        type: 'string',
        describe: 'The seller DID (if not the AFS owner)'
      })
    }, ongetquantity)
  .command('lock <did>', 'Locks an AFS from resale', () => {
    program
      .positional('did', {
        type: 'string',
        describe: 'The AFS DID'
      })
  }, onlock)
  // act resale unlock de959a3a14a5e299d4ad360e96a92f8287088335a6aea78002f7cb0c89bd5570 1
  .command('unlock <did> <config>', 'Unlocks an AFS for resale', () => {
    program
      .positional('did', {
        type: 'string',
        describe: 'The AFS DID'
      })
      .positional('config', {
        type: 'number',
        describe: 'The resale config ID'
      })
  }, onunlock)
  .command('lock-quantity <seller> <did> <config> <quantity>', 'Locks a number of purchased AFSs from resale', () => {
    program
      .positional('seller', {
        type: 'string',
        describe: 'The seller DID'
      })
      .positional('config', {
        type: 'number',
        describe: 'The resale config ID'
      })
      .positional('did', {
        type: 'string',
        describe: 'The AFS DID'
      })
      .positional('quantity', {
        type: 'number',
        describe: 'The number of AFSs to lock from resale'
      })
  }, onlockquantity)
  .command('unlock-quantity <seller> <did> <config> <quantity>', 'Unlocks a number of purchased AFSs for resale', () => {
    program
      .positional('seller', {
        type: 'string',
        describe: 'The seller DID'
      })
      .positional('config', {
        type: 'number',
        describe: 'The resale config ID'
      })
      .positional('did', {
        type: 'string',
        describe: 'The AFS DID'
      })
      .positional('quantity', {
        type: 'number',
        describe: 'The number of AFSs to unlock for resale'
      })
  }, onunlockquantity)
  .command('set-config [--seller] <did> <path>', 'Sets the global resale config of an AFS using the provided JSON', () => {
    program
      .positional('did', {
        type: 'string',
        describe: 'The AFS DID'
      })
      .positional('path', {
        type: 'string',
        describe: 'The path to the resale config JSON file'
      })
      .option('seller', {
        type: 'string',
        describe: 'The seller DID'
      })
  }, onsetconfig)
  .command('get-config [--seller] <did> <config>', 'Returns a resale configuration. If the seller option is passed in, the seller\'s resale configuration will be returned.', () => {
    program
      .positional('did', {
        type: 'string',
        describe: 'The AFS DID'
      })
      .positional('config', {
        type: 'number',
        describe: 'The resale config ID'
      })
      .option('seller', {
        type: 'string',
        describe: 'The seller DID'
      })
  }, ongetconfig)

// Emit program usage help
if (0 == argv._.length && argv.help) {
  program.showHelp()
  process.exit(0)
}

module.exports = (async function main() {
  if (argv.debug) {
    require('debug').enable('ara-contracts*')
  }
}())

async function onprice(argv) {
  const { did, price, seller, config } = argv
  const { password } = await promptForPassword()

  try {
    let receipt
    if (seller) {
      info(`Setting the resale price for ${did} from seller ${seller} for resale configuration ${config} to ${price} Ara...`)
      await setResalePrice({
        requesterDid: seller,
        contentDid: did,
        password,
        configID: config,
        price
      })
      info(`Resale price for ${did} from seller ${seller} for resale configuration ${config} successfully set to ${price} Ara.`)
    } else {
      info(`Setting the minimum resale price for ${did} for resale configuration ${config} to ${price} Ara...`)
      await setMinResalePrice({
        contentDid: did,
        password,
        price,
        configID: config
      })
      info(`Minimum resale price for ${did} for resale configuration ${config} successfully set to ${price} Ara.`)
    }
  } catch (err) {
    onfatal(err)
  }
}

async function onquantity(argv) {
  const { did, amount, config } = argv
  const { password } = await promptForPassword()

  try {
    info(`Setting resale quantity for ${did} to ${amount}...`)
    await setResaleQuantity({
      contentDid: did,
      password,
      maxResales: amount,
      configID: config
    })
    info(`Resale quantity for ${did} successfully set to ${amount}.`)
  } catch (err) {
    onfatal(err)
  }
}

async function ongetprice(argv) {
  const { did, seller, config } = argv

  try {
    let price
    if (seller) {
      info(`Getting resale price for ${did} from seller ${seller}...`)
      price = await getResalePrice({
        contentDid: did,
        sellerDid: seller,
        configID: config
      })
      info(`Resale price for ${did} from seller ${seller} is ${price} Ara.`)
    } else {
      info(`Getting minimum resale price for ${did}...`)
      price = await getMinResalePrice({
        contentDid: did,
        configID: config
      })
      info(`Minimum resale price for ${did} is ${price} Ara.`)
    }
  } catch (err) {
    onfatal(err)
  }
}

async function ongetquantity(argv) {
  const { did, seller, config } = argv

  try {
    let quantity
    if (seller) {
      info(`Getting quantity of ${did} available for purchase from ${seller}...`)
      quantity = await getResaleAvailability({
        contentDid: did,
        sellerDid: seller,
        configID: config
      })
      info(`${seller} has ${quantity} copies of ${did} available for purchase.`)
    } else {
      info(`Getting maximum number of times ${did} can be resold...`)
      quantity = await getResaleQuantity({
        contentDid: did,
        configID: config
      })
      info(`${did} can be resold ${quantity} times.`)
    }
  } catch (err) {
    onfatal(err)
  }
}

async function onlock(argv) {
  const { did } = argv
  const { password } = await promptForPassword()

  try {
    info (`Locking AFS ${did} from resale...`)
    await lockResale({
      contentDid: did,
      password
    })
    info (`AFS ${did} locked from resale.`)
  } catch (err) {
    onfatal(err)
  }
}

async function onunlock(argv) {
  const { did, config } = argv
  const { password } = await promptForPassword()

  try {
    info (`Unlocking AFS ${did} for resale with configuration ${config}...`)
    await unlockResale({
      contentDid: did,
      password,
      configID: config
    })
    info (`AFS ${did} unlocked for resale with configuration ${config}.`)
  } catch (err) {
    onfatal(err)
  }
}

async function onlockquantity(argv) {
  const { seller, did, quantity, config } = argv
  const { password } = await promptForPassword()

  try {
    info(`Locking ${quantity} copies of ${did} from resale by seller ${seller}...`)
    await lockResaleQuantity({
      requesterDid: seller,
      contentDid: did,
      password,
      quantity,
      configID: config
    })
    info(`${quantity} copies of ${did} locked from resale by seller ${seller}.`)
  } catch (err) {
    onfatal(err)
  }
}

async function onunlockquantity(argv) {
  const { seller, did, quantity, config } = argv
  const { password } = await promptForPassword()

  try {
    info(`Unlocking ${quantity} copies of ${did} for resale by seller ${seller}...`)
    await unlockResaleQuantity({
      requesterDid: seller,
      contentDid: did,
      password,
      quantity,
      configID: config
    })
    info(`${quantity} copies of ${did} unlocked for resale by seller ${seller}.`)
  } catch (err) {
    onfatal(err)
  }
}

async function onsetconfig(argv) {
  const { did, path } = argv
  const { password } = await promptForPassword()

  try {
    await setResaleConfig({
      contentDid: did,
      password,
      config: path
    })
  } catch (err) {
    onfatal(err)
  }
}

async function ongetconfig(argv) {
  const { seller, did, config } = argv

  try {
    let opts = { 
      contentDid: did,
      configID: config
    }
    if (seller) {
      // act resale get-config --seller 8a98c8305035dcbb1e8fa0826965200269e232e45ac572d26a45db9581986e67 de959a3a14a5e299d4ad360e96a92f8287088335a6aea78002f7cb0c89bd5570 1
      opts = Object.assign(opts, { sellerDid: seller })
      info(`Getting resale config ${config} in AFS ${did} from seller ${seller}...`)
      const resaleConfig = await getResaleConfig(opts)
      info(`\nSeller ${seller} resale config ${config}:\n
      {\n\t
        Minimum resale price: ${resaleConfig.minResalePrice} Ara\n\t
        Maximum # of resales: ${resaleConfig.maxNumResales}\n\n\t
        Resale Price: ${resaleConfig.resalePrice} Ara\n\t
        # available for resale: ${resaleConfig.available}\n\t
        # owned total: ${resaleConfig.quantity}\n
      }`)
    } else {
      // act resale get-config 196ebd2be2ecac1c7ee2593be97c3c25af7326565a8fe3835be496814dc6792f 1
      info(`Getting resale config ${config} in AFS ${did}...`)
      const resaleConfig = await getResaleConfig(opts)
      info(`\nResale config ${config}:\n
      {\n\t
        Minimum resale price: ${resaleConfig.minResalePrice} Ara\n\t
        Maximum # of resales: ${resaleConfig.maxNumResales}
      }`)
    }
  } catch (err) {
    onfatal(err)
  }
}

async function promptForPassword() {
  return await inquirer.prompt([{
    type: 'password',
    name: 'password',
    message:
    'Please provide the passphrase for your identity. This is needed to ' +
    'complete this action.\n' +
    'Passphrase:'
  }]) 
}

function onfatal(err) {
  if (err) {
    debug(err)
    error('fatal:', err.message)
  }
  process.exit(1)
}
