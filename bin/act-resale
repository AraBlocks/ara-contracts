#!/usr/bin/env node

const debug = require('debug')('ara-contracts:cli:resale')
const { info, warn, error, log } = require('ara-console')
const { createProgram } = require('../lib/program')
const inquirer = require('inquirer')

const {
  getResaleAvailability,
  setMinResalePrice,
  getMinResalePrice,
  setResaleQuantity,
  getResaleQuantity,
  setResalePrice,
  getResalePrice,
  unlockResale,
  lockResale
} = require('../commerce')

// yargs program command line interface instance
const program = createProgram({
  usage: `
usage: act resale: [-h] [--help] [options] [--] <command>
`
})

const { argv } = program
  .command('set-price [--seller] <did> <price>', 'Set the (minimum) resale price of an AFS. If the seller option is not passed in, the minimum resale price will be set.', () => {
    program
      .positional('did', {
        type: 'string',
        describe: 'The AFS DID'
      })
      .positional('price', {
        type: 'string',
        describe: 'The resale price to set for the AFS'
      })
      .option('seller', {
        alias: 's',
        type: 'string',
        describe: 'DID of the AFS seller (if the seller is not also the AFS owner)'
      })
  }, onprice)
  .command('set-quantity <did> <amount>', 'Set the number of times an AFS can be resold', () => {
    program
      .positional('did', {
        type: 'string',
        describe: 'The AFS DID'
      })
      .positional('amount', {
        type: 'number',
        describe: 'The number of times the AFS can be resold'
      })
  }, onquantity)
  .command('get-price [--seller] <did>', 'Get the (minimum) resale price of an AFS. If the seller option is not passed in, the minimum resale price will be returned.', () => {
    program
      .positional('did', {
        type: 'string',
        describe: 'The AFS DID'
      })
      .option('seller', {
        alias: 's',
        type: 'string',
        describe: 'DID of the AFS seller (if the seller is not also the AFS owner)'
      })
  }, ongetprice)
  .command('get-quantity [--seller] <did>', 'Get the number of time an AFS can be resold. If the seller option is passed in, the seller\'s supply will be returned.', () => {
    program
      .positional('did', {
        type: 'string',
        describe: 'The AFS DID'
      })
      .option('seller', {
        alias: 's',
        type: 'string',
        describe: 'The seller DID (if not the AFS owner)'
      })
    }, ongetquantity)
  .command('lock <seller> <did> <quantity>', 'Locks a number of purchased AFSs from resale', () => {
    program
      .positional('seller', {
        type: 'string',
        describe: 'The seller DID'
      })
      .positional('did', {
        type: 'string',
        describe: 'The AFS DID'
      })
      .positional('quantity', {
        type: 'number',
        describe: 'The number of AFSs to lock from resale'
      })
  }, onlock)
  .command('unlock <seller> <did> <quantity>', 'Unlocks a number of purchased AFSs for resale', () => {
    program
      .positional('seller', {
        type: 'string',
        describe: 'The seller DID'
      })
      .positional('did', {
        type: 'string',
        describe: 'The AFS DID'
      })
      .positional('quantity', {
        type: 'number',
        describe: 'The number of AFSs to unlock for resale'
      })
  }, onunlock)

// Emit program usage help
if (0 == argv._.length && argv.help) {
  program.showHelp()
  process.exit(0)
}

module.exports = (async function main() {
  if (argv.debug) {
    require('debug').enable('ara-contracts*')
  }
}())

async function onprice(argv) {
  const { did, price, seller } = argv
  const { password } = await promptForPassword()

  try {
    let receipt
    if (seller) {
      info(`Setting the resale price for ${did} from seller ${seller} to ${price} Ara...`)
      await setResalePrice({
        requesterDid: seller,
        contentDid: did,
        password,
        price
      })
      info(`Resale price for ${did} from seller ${seller} successfully set to ${price} Ara.`)
    } else {
      info(`Setting the minimum resale price for ${did} to ${price} Ara...`)
      await setMinResalePrice({
        contentDid: did,
        password,
        price
      })
      info(`Minimum resale price for ${did} successfully set to ${price} Ara.`)
    }
  } catch (err) {
    onfatal(err)
  }
}

async function onquantity(argv) {
  const { did, amount } = argv
  const { password } = await promptForPassword()

  try {
    info(`Setting resale quantity for ${did} to ${amount}...`)
    await setResaleQuantity({
      contentDid: did,
      password,
      maxResales: amount
    })
    info(`Resale quantity for ${did} successfully set to ${amount}.`)
  } catch (err) {
    onfatal(err)
  }
}

async function ongetprice(argv) {
  const { did, seller } = argv

  try {
    let price
    if (seller) {
      info(`Getting resale price for ${did} from seller ${seller}...`)
      price = await getResalePrice({
        contentDid: did,
        seller
      })
      info(`Resale price for ${did} from seller ${seller} is ${price} Ara.`)
    } else {
      info(`Getting minimum resale price for ${did}...`)
      price = await getMinResalePrice({
        contentDid: did
      })
      info(`Minimum resale price for ${did} is ${price} Ara.`)
    }
  } catch (err) {
    onfatal(err)
  }
}

async function ongetquantity(argv) {
  const { did, seller } = argv

  try {
    let quantity
    if (seller) {
      info(`Getting quantity of ${did} available for purchase from ${seller}...`)
      quantity = await getResaleAvailability({
        contentDid: did,
        seller
      })
      info(`${seller} has ${quantity} copies of ${did} available for purchase.`)
    } else {
      info(`Getting maximum number of times ${did} can be resold...`)
      quantity = await getResaleQuantity({
        contentDid: did
      })
      info(`${did} can be resold ${quantity} times.`)
    }
  } catch (err) {
    onfatal(err)
  }
}

async function onlock(argv) {
  const { seller, did, quantity } = argv
  const { password } = await promptForPassword()

  try {
    info(`Locking ${quantity} copies of ${did} from resale by seller ${seller}...`)
    await lockResale({
      requesterDid: seller,
      contentDid: did,
      password,
      quantity
    })
    info(`${quantity} copies of ${did} locked from resale by seller ${seller}.`)
  } catch (err) {
    onfatal(err)
  }
}

async function onunlock(argv) {
  const { seller, did, quantity } = argv
  const { password } = await promptForPassword()

  try {
    info(`Unlocking ${quantity} copies of ${did} for resale by seller ${seller}...`)
    await unlockResale({
      requesterDid: seller,
      contentDid: did,
      password,
      quantity
    })
    info(`${quantity} copies of ${did} unlocked for resale by seller ${seller}.`)
  } catch (err) {
    onfatal(err)
  }
}

async function promptForPassword() {
  return await inquirer.prompt([{
    type: 'password',
    name: 'password',
    message:
    'Please provide the passphrase for your identity. This is needed to ' +
    'complete this action.\n' +
    'Passphrase:'
  }]) 
}

function onfatal(err) {
  if (err) {
    debug(err)
    error('fatal:', err.message)
  }
  process.exit(1)
}
