#!/usr/bin/env node

/* eslint no-shadow: [ "error", { "allow": ["_", "program", "argv"] }] */

const debug = require('debug')('ara-contracts:cli:library')
const { createProgram } = require('../lib/program')
const { info, error } = require('ara-console')
const library = require('../library')

// yargs program command line interface instance
const program = createProgram({
  usage: `
usage: act library: [-h] [--help]
                     <did> [options]
`
})

const { argv } = program
  .command('$0 <did>', 'Gets a list of content DIDs purchased by <did>', (_) => {
    _
      .positional('did', {
        type: 'string',
        describe: 'The library owner\'s DID'
      })
      .help('h')
  }, onall)
  .command('get <did> <index>', 'Gets the content DID at <index> in <did>\'s library', (_) => {
    _
      .positional('did', {
        type: 'string',
        describe: 'The library owner\'s DID'
      })
      .positional('index', {
        type: 'number',
        describe: 'The position in the library'
      })
      .help('h')
  }, onget)
  .help('h')

// Main program entry
module.exports = (async function main() {
  if (argv.debug) {
    require('debug').enable('ara-contracts*')
  }
}())

async function onall(argv) {
  const { did } = argv
  try {
    info(`Getting ${did}'s library...`)
    const size = await library.getLibrarySize(did)
    const lib = await library.getLibrary(did)
    info(`${did} library (${size})\n${lib}.`)
  } catch (err) {
    onfatal(err)
  }
}

async function onget(argv) {
  const { did, index } = argv
  try {
    info(`Getting item ${index} in ${did}'s library...`)
    const contentDid = await library.getLibraryItem({ requesterDid: did, index })
    info(`item ${index} has did: ${contentDid}.`)
  } catch (err) {
    onfatal(err)
  }
}

function onfatal(err) {
  if (err) {
    debug(err)
    error('fatal:', err.message)
  }
  process.exit(1)
}
