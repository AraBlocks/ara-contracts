#!/usr/bin/env node

/**
 * THIS CMD IS FOR TESTING PURPOSES ONLY!!
 */


const debug = require('debug')('ara-contracts:cli:setup')
const { info, warn, error, log } = require('ara-console')
const { createProgram } = require('../lib/program')
const inquirer = require('inquirer')
const { web3 } = require('ara-context')()
const account = require('ara-web3/account')

const toLower = x => String(x).toLowerCase()

// yargs program command line interface instance
const program = createProgram({
  usage: `
usage: act setup: [-h] [--help] 
                  [options] [--] <did>
`
})

const { argv } = program
  .option('fund', {
    alias: 'f',
    type: 'boolean',
    describe: 'Amount of ether to fund the wallet'
  })

// Emit program usage help
if (0 == argv._.length && argv.help) {
  program.showHelp()
  process.exit(0)
}

module.exports = (async function main() {
  if (1 !== argv._.length) {
    onfatal(new Error("Please supply a single DID to import."))
  }

  const { password } = await promptForPassword()

  const { fund } = argv
  try {
    const did = argv._[0]
    const { address, privateKey } = await account.load({ did, password })
    const defaultAccounts = await web3.eth.getAccounts()
    const addr = await web3.eth.personal.importRawKey(privateKey, password)
    web3.eth.defaultAccount = addr
    const success = await web3.eth.personal.unlockAccount(addr, password, 0)
    info("set", address, "as default account")

    if (fund) {
      const oneEthInWei = web3.utils.toWei('1', 'ether')
      await supplyAccount(address, defaultAccounts, oneEthInWei)
      info("funded", address, "with", 1, "ETH")
      const balance = await web3.eth.getBalance(web3.eth.defaultAccount)
      info("new balance:", web3.utils.fromWei(balance), "ETH")
    }
  } catch (err) {
    onfatal(err)
  }
}())

async function supplyAccount(address, accounts, transferAmount) {
  let balance = 0
  let i = 0
  while (balance < 1) {
    if (!accounts[i]) {
      break
    }
    // eslint-disable-next-line no-await-in-loop
    balance = await web3.eth.getBalance(accounts[i])
    balance = Number(web3.utils.fromWei(balance, 'ether'))
    i++
  }

  if (accounts[i]) {
    await web3.eth.sendTransaction({ from: accounts[i], to: address, value: transferAmount })
  }
}

async function promptForPassword() {
  return await inquirer.prompt([{
    type: 'password',
    name: 'password',
    message:
    "Please provide the passphrase for your identity. This is needed to " +
    "complete this action.\n" +
    "Passphrase:"
  }]) 
}

function onfatal(err) {
  if (err) {
    debug(err)
    error("fatal:", err.message)
  }
  process.exit(1)
}
