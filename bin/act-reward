#!/usr/bin/env node

const debug = require('debug')('ara-contracts:cli:reward')
const { info, warn, error, log } = require('ara-console')
const { createProgram } = require('../lib/program')
const { randomBytes } = require('ara-crypto')
const { ethify } = require('ara-util/web3')
const rewards = require('../rewards')
const inquirer = require('inquirer')

// yargs program command line interface instance
const program = createProgram({
  usage: `
usage: act reward: [-h] [--help] [options]
`
})

const { argv } = program
  .command('balance <did> <content>', 'Query <did>\'s reward balance for <content>', () => {
    program
      .positional('did', {
        type: 'string',
        describe: 'The DID that owns the balance'
      })
      .positional('content', {
        type: 'string',
        describe: 'The content DID where the balance is located'
      })
  }, onbalance)
  .command('redeem <did> <content>', 'Transfer balance from <content> to <did> account', () => {
    program
      .positional('did', {
        type: 'string',
        describe: 'The DID that owns the balance'
      })
      .positional('content', {
        type: 'string',
        describe: 'The content DID where the balance is located'
      })
  }, onredeem)
  .command('submit <did> <content> <budget>', 'Submit a budget for a DCDN download', () => {
    program
      .positional('did', {
        type: 'string',
        describe: 'The DID providing the budget'
      })
      .positional('content', {
        type: 'string',
        describe: 'The content DID where the budget will be submitted'
      })
      .positional('budget', {
        type: 'string',
        describe: 'The amount of Ara to budget for a DCDN download'
      })
  }, onsubmit)
  .command('budget <content> <jobId>', 'Query the budget for a <jobId>', () => {
    program
      .positional('content', {
        type: 'string',
        describe: 'The content DID where the budget is located'
      })
      .positional('jobId', {
        type: 'string',
        describe: 'The ID of the DCDN job the budget is for'
      })
  }, onbudget)
  .command('allocate <did> <content> <jobId>', 'Allocate the budget for <jobId> between peers', () => {
    program
      .positional('did', {
        type: 'string',
        describe: 'The DID allocating the budget'
      })
      .positional('content', {
        type: 'string',
        describe: 'The content DID where the budget is located'
      })
      .positional('jobId', {
        type: 'string',
        describe: 'The ID of the DCDN job the budget is for'
      })
  }, onallocate)

// Emit program usage help
if (0 == argv._.length && argv.help) {
  program.showHelp()
  process.exit(0)
}

// Main program entry
module.exports = (async function main() {
  if (argv.debug) {
    require('debug').enable('ara-contracts*')
  }
}())

async function onbalance(argv) {
  const { content, did, secret, network, keyring } = argv
  const keyringOpts = { secret, network, keyring }
  const { password } = await promptForPassword()
  try {
    info(`Getting balance for ${did} in ${content}.`)
    const balance = await rewards.getRewardsBalance({ farmerDid: did, contentDid: content, password, keyringOpts })
    info(`${did} has ${balance} Ara redeembale in ${content}.`)
  } catch (err) {
    onfatal(err)
  }
}

async function onredeem(argv) {
  const { content, did, secret, network, keyring } = argv
  const keyringOpts = { secret, network, keyring }
  const { password } = await promptForPassword()
  try {
    info(`${did} redeeming balance...`)
    const balance = await rewards.redeem({ farmerDid: did, contentDid: content, password, keyringOpts })
    info(`${did} redeemed ${balance} Ara from ${contentDid}.`)
  } catch (err) {
    onfatal(err)
  }
}

async function onsubmit(argv) {
  const { content, did, budget, secret, network, keyring } = argv
  const keyringOpts = { secret, network, keyring }
  const { password } = await promptForPassword()
  try {
    const jobId = ethify(randomBytes(32), true)
    info(`Submitting ${budget} Ara for job ${jobId} in ${content}...`)
    await rewards.submit({ requesterDid: did, contentDid: content, password, job: { jobId, budget }, keyringOpts })
    info(`Submitted ${budget} Ara as rewards for job ${jobId} in ${content}.`)
  } catch (err) {
    onfatal(err)
  }
}

async function onbudget(argv) {
  const { content, jobId } = argv
  try {
    info(`Getting budget for job ${jobId} in ${content}...`)
    const budget = await rewards.getBudget({ contentDid: content, jobId })
    info(`Job ${jobId} in ${content} has a budget of ${budget} Ara.`)
  } catch (err) {
    onfatal(err)
  }
}

async function onallocate(argv) {
  const { content, did, jobId, secret, network, keyring } = argv
  const keyringOpts = { secret, network, keyring }
  const { password } = await promptForPassword()

  let { farmers } = await promptForFarmers()
  let { distrib } = await promptForDistrib()
  farmers = farmers.split(',').map((farmer) => {
    return farmer.trim()
  })
  distrib = distrib.split(',').map((distrib) => {
    return distrib.trim()
  })

  if (farmers.length !== distrib.length) {
    onfatal(new Error(`Expected same number of farmers as distributions. Got ${farmers.length} farmers and ${distrib.length} distributions.`))
  }

  try {
    info(`Allocating rewards for job ${jobId} in ${content}...`)
    await rewards.allocate({
      contentDid: content,
      requesterDid: did,
      keyringOpts,
      password,
      job: {
        jobId,
        farmers,
        rewards: distrib
      }})
  } catch (err) {
    onfatal(err)
  }
}

async function promptForPassword() {
  return await inquirer.prompt([{
    type: 'password',
    name: 'password',
    message:
    "Please provide the passphrase for your identity. This is needed to " +
    "complete this action.\n" +
    "Passphrase:"
  }])
}

async function promptForFarmers() {
  return await inquirer.prompt([{
    type: 'string',
    name: 'farmers',
    message:
    "Please provide a comma separated list of farmer DIDs. This is needed to " +
    "complete this action.\n" +
    "Farmers:"
  }])
}

async function promptForDistrib() {
  return await inquirer.prompt([{
    type: 'string',
    name: 'distrib',
    message:
    "Please provide a comma separated list of Ara distributions corresponding to the list of farmers. This is needed to " +
    "complete this action.\n" +
    "Distribution:"
  }])
}

function onfatal(err) {
  if (err) {
    debug(err)
    error("fatal:", err.message)
  }
  process.exit(1)
}
