#!/usr/bin/env node

const debug = require('debug')('ara-contracts:cli:approve')
const { info, warn, error, log } = require('ara-console')
const { createProgram } = require('../lib/program')
const inquirer = require('inquirer')

const {
  approve,
  increaseApproval,
  decreaseApproval
} = require('../token')

// yargs program command line interface instance
const program = createProgram({
  usage: `
usage: act approve: [-h] [--help] [options] [--] <approver> <spender> <amount>
`
})

// Parse program arguments based on yargs spec
const { argv } = program
  .option('approver', {
    alias: 'a',
    describe: 'DID of the approver (the account that owns the tokens to be spent)'
  })
  .option('spender', {
    alias: 's',
    describe: 'DID of the spender that is being approved'
  })
  .option('increase', {
    alias: 'i',
    type: 'boolean',
    describe: 'Flag to increase approval rather than overwrite'
  })
  .option('decrease', {
    alias: 'd',
    type: 'boolean',
    describe: 'Flag to decrease approval rather than overwrite'
  })
  .conflicts('i', 'd')
  .conflicts('d', 'i')

// Emit program usage help
if (0 == argv._.length && argv.help) {
  program.showHelp()
  process.exit(0)
}

// Main program entry
module.exports = (async function main() {
  const { increase, decrease } = argv
  let { approver, spender } = argv
  let amount = argv._[0]

  if (!approver || 'string' !== typeof approver) {
    ({ did: approver } = await promptForDID('Please provide the DID of the approver.\nApprover DID:'))
  }
  if (!spender || 'string' !== typeof spender) {
    ({ did: spender } = await promptForDID('Please provide the DID of the spender to be approved.\nSpender DID:'))
  }
  if ('number' !== typeof amount || amount <= 0) {
    ({ amount } = await promptForAmount())
    if ('number' !== typeof amount || amount <= 0) { 
      onfatal(new TypeError(`Expected amount to be a positive number. Got ${amount}. Ensure that the approval amount is a positive number.`))
    }
  }

  console.log(approver, spender, increase, decrease, amount)
  const { password } = await promptForPassword()

  const opts = { spender, did: approver, password, val: amount }
  try {
    let receipt
    if (increase) {
      receipt = await increaseApproval(opts)
    } else if (decrease) {
      receipt = await decreaseApproval(opts)
    } else {
      receipt = await approve(opts)
    }
  } catch (err) {
    onfatal(err)
  }
}())

async function promptForPassword() {
  return await inquirer.prompt([{
    type: 'password',
    name: 'password',
    message:
    "Please provide the passphrase for your identity. This is needed to " +
    "complete this action.\n" +
    "Passphrase:"
  }]) 
}

async function promptForAmount() {
  return await inquirer.prompt([{
    name: 'amount',
    message:
    "Please provide the number of Ara tokens you approve the spender to spend.\n" +
    "Number of Ara tokens:"
  }]) 
}

async function promptForDID(message) {
  return await inquirer.prompt([{
    name: 'did',
    message
  }])
}

function onfatal(err) {
  if (err) {
    debug(err)
    error("fatal:", err.message)
  }
  process.exit(1)
}
