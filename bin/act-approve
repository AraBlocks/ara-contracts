#!/usr/bin/env node

const debug = require('debug')('ara-contracts:cli:approve')
const { info, warn, error, log } = require('ara-console')
const { createProgram } = require('../lib/program')
const inquirer = require('inquirer')

const {
  approve,
  increaseApproval,
  decreaseApproval
} = require('../token')

// yargs program command line interface instance
const program = createProgram({
  usage: `
usage: act approve: [-h] [--help] [options] [--] <approver> <spender> <amount>
`
})

// Parse program arguments based on yargs spec
const { argv } = program
  .command('$0 [options] <approver> <spender> <amount>', 'Sets <spender> allowance to <amount> on behalf of <spender> (overwrites any previous allowance)', () => {
    program
      .positional('approver', {
        type: 'string',
        describe: 'DID of the approver (the account that owns the tokens to be spent)'
      })
      .positional('spender', {
        type: 'string',
        describe: 'DID of the spender that is being approved'
      })
      .positional('amount', {
        type: 'string',
        describe: 'Amount to modify the allowance for <spender>'
      })
      .option('increase', {
        alias: 'i',
        type: 'boolean',
        describe: 'Flag to increase approval by <amount>'
      })
      .option('decrease', {
        alias: 'd',
        type: 'boolean',
        describe: 'Flag to decrease approval by <amount>'
      })
      .conflicts('i', 'd')
      .conflicts('d', 'i')
  })

// Emit program usage help
if (0 == argv._.length && argv.help) {
  program.showHelp()
  process.exit(0)
}

// Main program entry
module.exports = (async function main() {
  if (argv.debug) {
    require('debug').enable('ara-contracts*')
  }
  const { approver, spender, amount increase, decrease } = argv
  console.log(approver, spender, increase, decrease, amount)

  const { password } = await promptForPassword()

  const opts = { spender, did: approver, password, val: amount.toString() }
  try {
    let receipt
    if (increase) {
      receipt = await increaseApproval(opts)
      if (receipt.status) {
        info(approver, 'increased allowance for', spender, 'by', amount, 'Ara tokens.')
      }
    } else if (decrease) {
      receipt = await decreaseApproval(opts)
      if (receipt.status) {
        info(approver, 'decreased allowance for', spender, 'by', amount, 'Ara tokens.')
      }
    } else {
      receipt = await approve(opts)
      if (receipt.status) {
        info(approver, 'set allowance for', spender, 'to', amount, 'Ara tokens.')
      }
    }
  } catch (err) {
    onfatal(err)
  }
}())

async function promptForPassword() {
  return await inquirer.prompt([{
    type: 'password',
    name: 'password',
    message:
    'Please provide the passphrase for your identity. This is needed to ' +
    'complete this action.\n' +
    'Passphrase:'
  }]) 
}

function onfatal(err) {
  if (err) {
    debug(err)
    error('fatal:', err.message)
  }
  process.exit(1)
}
