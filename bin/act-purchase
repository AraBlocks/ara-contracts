#!/usr/bin/env node

const debug = require('debug')('ara-contracts:cli:purchase')
const { info, warn, error, log } = require('ara-console')
const { createProgram } = require('../lib/program')
const { web3: { ethify } } = require('ara-util')
const { randomBytes } = require('ara-crypto')
const { purchase } = require('../purchase')
const inquirer = require('inquirer')

// yargs program command line interface instance
const program = createProgram({
  usage: `
usage: act purchase: [-h] [--help] [options]
`
})

const { argv } = program
  .command('$0 [--seller|config] <purchaser> <did> [--quantity] [--budget]', 'Purchase <did> from the ARA network', () => {
    program
      .positional('purchaser', {
        type: 'string',
        describe: 'The DID of the purchaser'
      })
      .positional('did', {
        type: 'string',
        describe: 'The content DID to purchase'
      })
      .option('seller', {
        type: 'string',
        describe: 'The DID of the seller'
      })
      .option('config', {
        alias: 'c',
        type: 'number',
        describe: 'The seller resale config ID'
      })
      .option('quantity', {
        alias: 'q',
        type: 'number',
        default: 1,
        describe: 'The number of copies to purchase'
      })
      .option('budget', {
        alias: 'b',
        type: 'number',
        default: 0,
        describe: 'The amount of Ara to budget for downloading the AFS'
      })
      .implies('seller', 'config')
  })

// Emit program usage help
if (0 == argv._.length && argv.help) {
  program.showHelp()
  process.exit(0)
}

// Main program entry
module.exports = (async function main() {
  let { purchaser, did, quantity, budget, seller, config } = argv
  const { secret, network, keyring } = argv
  const keyringOpts = { secret, network, keyring }

  let job = null
  if (0 > budget) {
    throw new TypeError(`Expecting 'budget' to be a 0 or greater. Got ${budget}. Try passing in a non-negative budget.`)
  }
  if (0 >= quantity) {
    throw new TypeError(`Expecting 'quantity' to be a greater than 0. Got ${quantity}. Try passing in a non-negative quantity.`) 
  }

  const { password } = await promptForPassword()
  let copyText
  if (1 !== quantity) {
    copyText = 'copies'
  } else {
    copyText = 'copy'
  }
  if (seller) {
    info(`Purchasing ${quantity} ${copyText} of ${did} from ${seller}...`)
  } else {
    info(`Purchasing ${quantity} ${copyText} of ${did}...`)
  }

  try {
    let opts = {
      requesterDid: purchaser,
      contentDid: did,
      keyringOpts,
      password,
      quantity,
      budget
    }
    if (seller) {
      // act purchase --seller 77da0a6389fd2942d30c794c7a7dd61c97d7f7b0ee3a795100d171404f9073e0 --config 1 8a98c8305035dcbb1e8fa0826965200269e232e45ac572d26a45db9581986e67 baf2aecbf7b391f6fc1cf74152b5be8321f717c8a081ad9c1f3ca95fada62966 --quantity 5 --budget 10
      opts = Object.assign(opts, { seller, configID: config })
    }
    // act purchase 8a98c8305035dcbb1e8fa0826965200269e232e45ac572d26a45db9581986e67 baf2aecbf7b391f6fc1cf74152b5be8321f717c8a081ad9c1f3ca95fada62966 --quantity 10 --budget 10
    const { config: purchasedConfig } = await purchase(opts)
    info(`${purchaser} purchased ${quantity} ${copyText} of ${did} with resale configID ${purchasedConfig}.`)
  } catch (err) {
    onfatal(err)
  }
}())

async function promptForPassword() {
  return await inquirer.prompt([{
    type: 'password',
    name: 'password',
    message:
    "Please provide the passphrase for your identity. This is needed to " +
    "complete this action.\n" +
    "Passphrase:"
  }]) 
}

function onfatal(err) {
  if (err) {
    debug(err)
    error("fatal:", err.message)
  }
  process.exit(1)
}
