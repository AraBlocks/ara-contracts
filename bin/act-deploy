#!/usr/bin/env node

const debug = require('debug')('ara-contracts:cli:deploy')
const { info, warn, error, log } = require('ara-console')
const { createProgram } = require('../lib/program')
const registry = require('../registry')
const inquirer = require('inquirer')
const { web3 } = require('ara-context')()
const account = require('ara-web3/account')
const { getAFSOwnerIdentity } = require('ara-util')

const toLower = x => String(x).toLowerCase()

// yargs program command line interface instance
const program = createProgram({
  usage: `
usage: act deploy: [-h] [--help] 
                   [options] [--] <pathspec>...
`
})

// Parse program arguments based on yargs spec
const { argv } = program
  .option('proxy', {
    alias: 'P',
    type: `boolean`,
    describe: 'Flag to indicate proxy deployment',
  })
  .option('standard', {
    alias: 'S',
    type: `boolean`,
    describe: 'Flag to indicate AFS standard deployment',
  })
  .option('did', {
    alias: 'd',
    describe: 'The content DID if proxy flag is set.\n Otherwise the Registry contract owner DID',
  })
  .option('version', {
    alias: 'v',
    describe: 'The version number of the AFS standard to deploy'
  })
  .option('fund', {
    alias: 'f',
    type: 'boolean',
    describe: 'TEST OPTION TO FUND ACCOUNT'
  })
  .conflicts('P', ['S', 'p'])

// Emit program usage help
if (0 == argv._.length && argv.help) {
  program.showHelp()
  process.exit(0)
}

// Main program entry
module.exports = (async function main() {
  const { proxy, standard } = argv
  let { did, version } = argv
  let [...paths] = argv._

  if (!paths || !paths.length) {
    onfatal(new Error("Missing local file paths. See 'act deploy --help'."))
    process.exit(0)
  }

  const { password } = await promptForPassword()

  if (argv.fund) {
    const owner = 'did:ara:4e56ed331bb52ae28f18969982275bb156f81f4b23c22115e9ddd2b51b4c89c4'
    // private key: 0xa38a74ba8d89e22841f1d705c0ae0b3c8355da9d56a0f2192b477563e4ee3d07
    const acct = await account.load({ did: owner, password })
    const defaultAccounts = await web3.eth.getAccounts()
    const { address } = acct
    const oneEthInWei = web3.utils.toWei('1', 'ether')
    console.log("funding", address, "with", oneEthInWei, "wei")
    await supplyAccount(address, defaultAccounts, oneEthInWei)
  }

  if (!did) {
    ({ did } = proxy ? await promptForDID("Please provide the content DID that this Proxy will be deployed for.")
      : await promptForDID("Please provide the DID of the Registry contract owner."))
  }
  if (!version) {
    ({ version } = proxy ? await promptForVersion("Please provide the AFS standard version you would like to use with this Proxy.")
      : await promptForVersion("Please provide the version name of the new AFS standard to be deployed."))
  }

  info('deploying', proxy ? 'new proxy...' : 'new standard...')
  if (proxy) {
    // act deploy -P -f -d 4e56ed331bb52ae28f18969982275bb156f81f4b23c22115e9ddd2b51b4c89c4 -v 1
    const address = await registry.deployProxy({
      contentDid: did,
      password,
      version
    })
    info("Proxy deployed at address", address, "for content", did)
  } else {
    // act deploy -S -f -d 4e56ed331bb52ae28f18969982275bb156f81f4b23c22115e9ddd2b51b4c89c4 -v 1 ./contracts/AFS.sol ./contracts/Library.sol ./contracts/Registry.sol ./contracts/Proxy.sol ./contracts/ARAToken.sol
    const address = await registry.deployNewStandard({
      requesterDid: did,
      password,
      version,
      paths
    })
    info("New AFS standard version", version, "deployed at address", address)
  }
}())

async function promptForPassword() {
  return await inquirer.prompt([{
    type: 'password',
    name: 'password',
    message:
    "Please provide the passphrase for your identity. This is needed to " +
    "complete this action.\n" +
    "Passphrase:"
  }]) 
}

async function promptForDID(message) {
  return await inquirer.prompt([{
    name: 'did',
    message
  }])
}

async function promptForVersion(message) {
  return await inquirer.prompt([{
    name: 'version',
    message
  }])
}

function onfatal(err) {
  if (err) {
    debug(err)
    error("fatal:", err.message)
  }
  process.exit(1)
}

async function supplyAccount(address, accounts, transferAmount) {
  let balance = 0
  let i = 0
  while (balance < 1) {
    if (!accounts[i]) {
      break
    }
    // eslint-disable-next-line no-await-in-loop
    balance = await web3.eth.getBalance(accounts[i])
    balance = Number(web3.utils.fromWei(balance, 'ether'))
    i++
  }

  if (accounts[i]) {
    await web3.eth.sendTransaction({ from: accounts[i], to: address, value: transferAmount })
  }
}
