#!/usr/bin/env node

const debug = require('debug')('ara-contracts:cli:deploy')
const { info, warn, error, log } = require('ara-console')
const { createProgram } = require('../lib/program')
const registry = require('../registry')
const inquirer = require('inquirer')
const rc = require('../rc')()

const toLower = x => String(x).toLowerCase()

// yargs program command line interface instance
const program = createProgram({
  usage: `
usage: act deploy: [-h] [--help] 
                   [options] [--] <pathspec>...
`
})

// Parse program arguments based on yargs spec
const { argv } = program
  .command('proxy [options] <did> <version>', 'Deploy a proxy contract for <did>', () => {
    program
      .positional('did', {
        type: 'string',
        describe: 'The content DID for this proxy'
      })
      .positional('version', {
        type: 'string',
        describe: 'The version name of the AFS standard to use with this proxy'
      })
      .option('upgrade', {
        alias: 'u',
        type: 'boolean',
        describe: 'Flag to indicate upgrade to <version>'
      })
      .option('force', {
        alias: 'f',
        describe: 'Bypass password input, must also pass in password.'
      })
      .option('password', {
        alias: 'p',
        describe: 'Password for DID'
      })
      .option('secret', {
        alias: 's',
        type: 'string',
        describe: 'Shared secret for the keyring',
      })
      .option('network', {
        alias: 'n',
        type: 'string',
        describe: 'Network name of the key for the DID resolver in the keyring',
      })
      .option('keyring', {
        alias: 'k',
        type: 'string',
        describe: 'Path to the keyring',
      })
  }, onproxy)
  .command('standard [options] <did> <version> <pathspec...>', 'Deploy a new AFS standard <version> with <did> (the registry contract owner)', () => {
    program
      .positional('did', {
        type: 'string',
        describe: 'The registry contract owner DID'
      })
      .positional('version', {
        type: 'string',
        describe: 'The version name of the new AFS standard'
      })
      .positional('pathspec', {
        type: 'string',
        describe: "Paths to the solidity dependencies(s) of AFS.sol"
      })
      .option('force', {
        alias: 'f',
        describe: 'Bypass password input, must also pass in password.'
      })
      .option('password', {
        alias: 'p',
        describe: 'Password for DID'
      })
      .option('secret', {
        alias: 's',
        type: 'string',
        describe: 'Shared secret for the keyring',
      })
      .option('network', {
        alias: 'n',
        type: 'string',
        describe: 'Network name of the key for the DID resolver in the keyring',
      })
      .option('keyring', {
        alias: 'k',
        type: 'string',
        describe: 'Path to the keyring',
      })
  }, onstandard)

// Emit program usage help
if (0 == argv._.length && argv.help) {
  program.showHelp()
  process.exit(0)
}

// Main program entry
module.exports = (async function main() {
  if (argv.debug) {
    require('debug').enable('ara-contracts*')
  }
}())

async function onproxy(argv) {
  let { did, version, upgrade, force, password } = argv
  const { secret, network, keyring } = argv
  const keyringOpts = { secret, network, keyring }
  if (force && !password) {
    onfatal(new Error('Must provide password if forcing a command.'))
  }

  if (!force) {
    ({ password } = await promptForPassword())
  }

  try {
    const opts = { contentDid: did, password, version, keyringOpts }
    if (!upgrade) {
      info(`Deploying new proxy for ${did} at version ${version}...`)
      // act deploy proxy 7278cc43820a31d6907b8ed358b05bcc03c6a9bf6bbaefdcb1d7baeff33de0a6 2 -s test-node -n resolver -k /Users/ericjiang/.ara/keyrings/aws-test.pub -D
      const address = await registry.deployProxy(opts)
      info(`Proxy deployed at address ${address} for ${did}.`)
    } else {
      info(`Upgrading proxy for ${did} to version ${version}...`)
      // act deploy proxy -u 1cdf07cbabb42a1abbe095a2d595771c8a24a59deb7642726eb70d89aee30db0 4
      const upgraded = await registry.upgradeProxy(opts)
      if (upgraded) {
        info(`Proxy successfully upgraded to version ${version}.`)
      }
    }
  } catch (err) {
    onfatal(err)
  }
}

async function onstandard(argv) {
  let { did, version, force, password } = argv
  let [ ...paths ] = argv.pathspec
  const { secret, network, keyring } = argv
  const keyringOpts = { secret, network, keyring }

  if (force && !password) {
    onfatal(new Error('Must provide password if forcing a command.'))
  }
  if (!force) {
    ({ password } = await promptForPassword())
  }

  try {
    info(`Deploying new AFS standard version ${version}...`)
    // act deploy standard 8a98c8305035dcbb1e8fa0826965200269e232e45ac572d26a45db9581986e67 1 ./contracts/AFS.sol ./contracts/Library.sol ./contracts/Registry.sol ./contracts/Proxy.sol ./contracts/AraToken.sol -D
    const address = await registry.deployNewStandard({
      requesterDid: did,
      password,
      version,
      paths,
      keyringOpts
    })
    info(`New AFS standard version ${version} deployed at address ${address}.`)
  } catch (err) {
    onfatal(err)
  }
}

async function promptForPassword() {
  return await inquirer.prompt([{
    type: 'password',
    name: 'password',
    message:
    "Please provide the passphrase for your identity. This is needed to " +
    "complete this action.\n" +
    "Passphrase:"
  }]) 
}

function onfatal(err) {
  if (err) {
    debug(err)
    error("fatal:", err.message)
  }
  process.exit(1)
}
