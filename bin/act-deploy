#!/usr/bin/env node

/* eslint no-shadow: [ "error", { "allow": ["_", "program", "argv"] }] */

const debug = require('debug')('ara-contracts:cli:deploy')
const { createProgram } = require('../lib/program')
const { info, error } = require('ara-console')
const registry = require('../registry')
const inquirer = require('inquirer')

// yargs program command line interface instance
const program = createProgram({
  usage: `
usage: act deploy: [-h] [--help] 
                   [options] [--] <pathspec>...
`
})

// Parse program arguments based on yargs spec
const { argv } = program
  .command('proxy [options] <did> <version>', 'Deploy a proxy contract for <did>', (_) => {
    _
      .positional('did', {
        type: 'string',
        describe: 'The content DID for this proxy'
      })
      .positional('version', {
        type: 'string',
        describe: 'The version name of the AFS standard to use with this proxy'
      })
      .option('upgrade', {
        alias: 'u',
        type: 'boolean',
        describe: 'Flag to indicate upgrade to <version>'
      })
      .option('force', {
        alias: 'f',
        describe: 'Bypass password input, must also pass in password.'
      })
      .option('password', {
        alias: 'p',
        describe: 'Password for DID'
      })
  }, onproxy)
  .command('standard [options] <did> <version> <pathspec...>', 'Deploy a new AFS standard <version> with <did> (the registry contract owner)', (_) => {
    _
      .positional('did', {
        type: 'string',
        describe: 'The registry contract owner DID'
      })
      .positional('version', {
        type: 'string',
        describe: 'The version name of the new AFS standard'
      })
      .positional('pathspec', {
        type: 'string',
        describe: 'Paths to the solidity dependencies(s) of AFS.sol'
      })
      .option('force', {
        alias: 'f',
        describe: 'Bypass password input, must also pass in password.'
      })
      .option('password', {
        alias: 'p',
        describe: 'Password for DID'
      })
  }, onstandard)

// Emit program usage help
if (0 === argv._.length && argv.help) {
  program.showHelp()
  process.exit(0)
}

// Main program entry
module.exports = (async function main() {
  if (argv.debug) {
    require('debug').enable('ara-contracts*')
  }
}())

async function onproxy(argv) {
  const {
    did, version, upgrade, force
  } = argv
  let { password } = argv
  const { secret, network, keyring } = argv
  const keyringOpts = { secret, network, keyring }
  if (force && !password) {
    onfatal(new Error('Must provide password if forcing a command.'))
  }

  if (!force) {
    ({ password } = await promptForPassword())
  }

  try {
    const opts = {
      contentDid: did,
      keyringOpts,
      password,
      version
    }
    const estimateOpts = Object.assign({}, opts, { estimate: true })
    if (!upgrade) {
      info(`Deploying new proxy for ${did} at version ${version}...`)
      // act deploy proxy 6684a1af92dea872c2a0b2e53fa0d610c806895c75a234bcdf92efcf86ee9a 1
      const cost = await registry.deployProxy(estimateOpts)
      const { answer } = await promptCostConfirmation(cost)
      if (answer) {
        const address = await registry.deployProxy(opts)
        info(`Proxy deployed at address ${address} for ${did}.`)
      }
    } else {
      info(`Upgrading proxy for ${did} to version ${version}...`)
      // act deploy proxy -u f5153d78579dcc7d4ed57acd3cc789a69fe3780314432443a471d1e2dea577b8
      const cost = await registry.upgradeProxy(estimateOpts)
      const { answer } = await promptCostConfirmation(cost)
      if (answer) {
        const upgraded = await registry.upgradeProxy(opts)
        if (upgraded) {
          info(`Proxy successfully upgraded to version ${version}.`)
        }
      }
    }
  } catch (err) {
    onfatal(err)
  }
}

async function onstandard(argv) {
  const { did, version, force } = argv
  let { password } = argv
  const [ ...paths ] = argv.pathspec
  const { secret, network, keyring } = argv
  const keyringOpts = { secret, network, keyring }

  if (force && !password) {
    onfatal(new Error('Must provide password if forcing a command.'))
  }
  if (!force) {
    ({ password } = await promptForPassword())
  }

  try {
    info(`Deploying new AFS standard version ${version}...`)
    // act deploy standard 8a98c8305035dcbb1e8fa0826965200269e232e45ac572d26a45db9581986e67 1 ./contracts/AFS.sol ./contracts/Library.sol ./contracts/Registry.sol ./contracts/Proxy.sol ./contracts/AraToken.sol -D
    const address = await registry.deployNewStandard({
      requesterDid: did,
      password,
      version,
      paths,
      keyringOpts
    })
    info(`New AFS standard version ${version} deployed at address ${address}.`)
  } catch (err) {
    onfatal(err)
  }
}

async function promptForPassword() {
  return inquirer.prompt([ {
    type: 'password',
    name: 'password',
    message:
    'Please provide the passphrase for your identity. This is needed to ' +
    'complete this action.\n' +
    'Passphrase:'
  } ])
}

async function promptCostConfirmation(cost) {
  return inquirer.prompt({
    type: 'confirm',
    name: 'answer',
    message:
    `This operation will cost ${cost} ETH. Are you sure you
    want to proceed?`
  })
}

function onfatal(err) {
  if (err) {
    debug(err)
    error('fatal:', err.message)
  }
  process.exit(1)
}
