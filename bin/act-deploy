#!/usr/bin/env node

const debug = require('debug')('ara-contracts:cli:deploy')
const { info, warn, error, log } = require('ara-console')
const { createProgram } = require('../lib/program')
const registry = require('../registry')
const inquirer = require('inquirer')

const toLower = x => String(x).toLowerCase()

// yargs program command line interface instance
const program = createProgram({
  usage: `
usage: act deploy: [-h] [--help] 
                   [options] [--] <pathspec>...
`
})

// Parse program arguments based on yargs spec
const { argv } = program
<<<<<<< HEAD
  .command('proxy [--upgrade] <did> <version>', 'Deploy a proxy contract for <did>', () => {
    program
      .positional('did', {
        type: 'string',
        describe: 'The content DID for this proxy'
      })
      .positional('version', {
        type: 'string',
        describe: 'The version name of the AFS standard to use with this proxy'
      })
      .option('upgrade', {
        alias: 'u',
        type: 'boolean',
        describe: 'Flag to indicate upgrade to <version>'
      })
  }, onproxy)
  .command('standard <did> <version> <pathspec...>', 'Deploy a new AFS standard <version> with <did> (the registry contract owner)', () => {
    program
      .positional('did', {
        type: 'string',
        describe: 'The registry contract owner DID'
      })
      .positional('version', {
        type: 'string',
        describe: 'The version name of the new AFS standard'
      })
      .positional('pathspec', {
        type: 'string',
        describe: "Paths to the solidity dependencies(s) of AFS.sol"
      })
  }, onstandard)
=======
  .option('proxy', {
    alias: 'P',
    type: `boolean`,
    describe: 'Flag to indicate proxy deployment',
  })
  .option('standard', {
    alias: 'S',
    type: `boolean`,
    describe: 'Flag to indicate AFS standard deployment',
  })
  .option('did', {
    alias: 'd',
    describe: 'The content DID if proxy flag is set.\n Otherwise the Registry contract owner DID',
  })
  .option('version', {
    alias: 'v',
    describe: 'The version number of the AFS standard to deploy'
  })
  .option('upgrade', {
    alias: 'u',
    describe: 'Flag to indicate upgrade to version'
  })
  .option('force', {
    alias: 'f',
    describe: 'Bypass password input, must also pass in password.'
  })
  .option('password', {
    alias: 'p',
    describe: 'Password for DID'
  })
  .conflicts('P', ['S', 'p'])
  .conflicts('S', 'u')
>>>>>>> master

// Emit program usage help
if (0 == argv._.length && argv.help) {
  program.showHelp()
  process.exit(0)
}

// Main program entry
module.exports = (async function main() {
  if (argv.debug) {
    require('debug').enable('ara-contracts*')
  }
}())

<<<<<<< HEAD
async function onproxy(argv) {
  let { did, version, upgrade } = argv
  const { password } = await promptForPassword()
=======
  let { did, version, upgrade, force, password } = argv
  if (force && !password) {
    onfatal(new Error("Must provide password if forcing a command."))
  }

  if (!force) {
    ({ password } = await promptForPassword())
  }
>>>>>>> master

  try {
    const opts = { contentDid: did, password, version }
    if (!upgrade) {
      info(`deploying new proxy for ${did} at version ${version}`)
      // DEBUG=* act deploy proxy 114045f3883a21735188bb02de024a4e1451cb96c5dcc80bdfa1b801ecf81b85 2
      const address = await registry.deployProxy(opts)
      info("Proxy deployed at address", address, "for content", did)
    } else {
<<<<<<< HEAD
      info(`upgrading proxy for ${did} to version ${version}`)
      // DEBUG=* act deploy proxy -u 114045f3883a21735188bb02de024a4e1451cb96c5dcc80bdfa1b801ecf81b85 3
      const upgraded = await registry.upgradeProxy(opts)
      if (upgraded) {
        info("Proxy successfully upgraded to version", version)
      }
=======
      // DEBUG=* act deploy -S -d 8a98c8305035dcbb1e8fa0826965200269e232e45ac572d26a45db9581986e67 -v 1 ./contracts/AFS.sol ./contracts/Library.sol ./contracts/Registry.sol ./contracts/Proxy.sol ./contracts/AraToken.sol
      const address = await registry.deployNewStandard({
        requesterDid: did,
        password,
        version,
        paths
      })
      info("New AFS standard version", version, "deployed at address", address)
>>>>>>> master
    }
  } catch (err) {
    onfatal(err)
  }
}

async function onstandard(argv) {
  let { did, version } = argv
  let [ ...paths ] = argv.pathspec
  const { password } = await promptForPassword()

  try {
    info(`deploying new AFS standard version ${version}`)
    // DEBUG=* act deploy standard 8a98c8305035dcbb1e8fa0826965200269e232e45ac572d26a45db9581986e67 3 ./contracts/AFS.sol ./contracts/Library.sol ./contracts/Registry.sol ./contracts/Proxy.sol ./contracts/AraToken.sol
    const address = await registry.deployNewStandard({
      requesterDid: did,
      password,
      version,
      paths
    })
    info("New AFS standard version", version, "deployed at address", address)
  } catch (err) {
    onfatal(err)
  }
}

async function promptForPassword() {
  return await inquirer.prompt([{
    type: 'password',
    name: 'password',
    message:
    "Please provide the passphrase for your identity. This is needed to " +
    "complete this action.\n" +
    "Passphrase:"
  }]) 
}

function onfatal(err) {
  if (err) {
    debug(err)
    error("fatal:", err.message)
  }
  process.exit(1)
}
