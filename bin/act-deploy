#!/usr/bin/env node

const debug = require('debug')('ara-contracts:cli:deploy')
const { info, warn, error, log } = require('ara-console')
const { createProgram } = require('../lib/program')
const registry = require('../registry')
const inquirer = require('inquirer')

const toLower = x => String(x).toLowerCase()

// yargs program command line interface instance
const program = createProgram({
  usage: `
usage: act deploy: [-h] [--help] 
                   [options] [--] <pathspec>...
`
})

// Parse program arguments based on yargs spec
const { argv } = program
  .option('proxy', {
    alias: 'P',
    type: `boolean`,
    describe: 'Flag to indicate proxy deployment',
  })
  .option('standard', {
    alias: 'S',
    type: `boolean`,
    describe: 'Flag to indicate AFS standard deployment',
  })
  .option('did', {
    alias: 'd',
    describe: 'The content DID if proxy flag is set.\n Otherwise the Registry contract owner DID',
  })
  .option('version', {
    alias: 'v',
    describe: 'The version number of the AFS standard to deploy'
  })
  .option('upgrade', {
    alias: 'u',
    describe: 'Flag to indicate upgrade to version'
  })
  .conflicts('P', ['S', 'p'])
  .conflicts('S', 'u')

// Emit program usage help
if (0 == argv._.length && argv.help) {
  program.showHelp()
  process.exit(0)
}

// Main program entry
module.exports = (async function main() {
  const { proxy, standard } = argv
  let [...paths] = argv._

  if ((!paths || !paths.length) && standard) {
    onfatal(new Error("Missing local file paths. See 'act deploy --help'."))
    process.exit(0)
  }

  const { password } = await promptForPassword()
  let { did, version, upgrade } = argv

  if (!did) {
    ({ did } = proxy ? await promptForDID("Please provide the content DID that this Proxy will be deployed for.")
      : await promptForDID("Please provide the DID of the Registry contract owner."))
  }
  if (!version) {
    ({ version } = proxy ? await promptForVersion("Please provide the AFS standard version you would like to use with this Proxy.")
      : await promptForVersion("Please provide the version name of the new AFS standard to be deployed."))
  }

  info('deploying', proxy ? (upgrade ? 'proxy upgrade' : 'new proxy...') : 'new standard...')
  try {
    if (proxy) {
      const opts = { contentDid: did, password, version }
      if (!upgrade) {
        // DEBUG=* act deploy -P -d 114045f3883a21735188bb02de024a4e1451cb96c5dcc80bdfa1b801ecf81b85 -v 3
        const address = await registry.deployProxy(opts)
        info("Proxy deployed at address", address, "for content", did)
      } else {
        // DEBUG=* act deploy -P -u -d 114045f3883a21735188bb02de024a4e1451cb96c5dcc80bdfa1b801ecf81b85 -v 3
        const upgraded = await registry.upgradeProxy(opts)
        if (upgraded) {
          info("Proxy successfully upgraded to version", version)
        }
      }
    } else {
      // DEBUG=* act deploy -S -d cebc55ee22134f2cabdfeb64364d4312ffbb3e887362f613290e6d06bc84bab3 -v 23 ./contracts/AFS.sol ./contracts/Library.sol ./contracts/Registry.sol ./contracts/Proxy.sol ./contracts/AraToken.sol ./contracts/Jobs.sol
      const address = await registry.deployNewStandard({
        requesterDid: did,
        password,
        version,
        paths
      })
      info("New AFS standard version", version, "deployed at address", address)
    }
  } catch (err) {
    onfatal(err)
  }
}())

async function promptForPassword() {
  return await inquirer.prompt([{
    type: 'password',
    name: 'password',
    message:
    "Please provide the passphrase for your identity. This is needed to " +
    "complete this action.\n" +
    "Passphrase:"
  }]) 
}

async function promptForDID(message) {
  return await inquirer.prompt([{
    name: 'did',
    message
  }])
}

async function promptForVersion(message) {
  return await inquirer.prompt([{
    name: 'version',
    message
  }])
}

function onfatal(err) {
  if (err) {
    debug(err)
    error("fatal:", err.message)
  }
  process.exit(1)
}
